排序:
如果要先排序的話，除了 Arrays.sort 外，可以考慮用 BucketSort或 CountingSort.
如果排序後的解是小於 n*log(n) 可以用 Counting Sort 來代替 Arrays.sort
數學:
custom Math.ceil 無條件四捨無入.  (a / b) + ( (a % b) == 0 ? 0 : 1); 

Finding out overlapped intervals [[s1,e1],[s2,e2]..].
we assume that there's no overlapped within the same interval list; the intervals are disjointed.
below facts are true when two intervals[start1,end1] & [start2,end2] are overlapped.
(1) end1 >= start2 & end2 >= start1 
(2) start3 = max(start1,start2) 
    end3 =   min(end1,end2)
    [start3,end3] is a overlapped interval when start3 <= end3 or start3 + duration < end3.
                  is not a overlapped when start3 > end3.

Two Pointer Technique is used to search pairs in a sorted array or sorted arrays.
Array Iteration to pick a pair.

looking for a pair in one list or one dimension Array
you can reuse the same slot from the array.
for(int i=0;i<=n;i++)   // 
  for(int j=0;<=n;j++) 
  {
      arr[i]+arr[j]
  }

you can not use the same slot from the array.
for(int i=0;i<=n;i++)   // (n-1)+(n-2)+..+1
  for(int j=i+1;<=n;j++)
  {
      arr[i]+arr[j]
  }




if one dimension array or this one list is sorted plus you can't select the same slot. you can use two pointer.
int l=0;
int r= arr.length;
while (l < r):
{
    if(a[l] + a[r] == sum)
    {
        r--;
        l++;
    }
    else if(a[l] + a[r] > sum) // check the sorted column
      r--;
    else 
      l++;
}

same slot doesn't mean it's a duplicate. a duplicate value can exists in two different slots.
you want to pick a pair from two lists or two dimension array.
for(int i=0;i<=n;i++)   
  for(int j=0;<=n;j++)  
  {
      int[] c = new int[a[i],b[j]];
  }

if two lists are sorted already, you can use two pointers.
This will pick all unqiue pairs from the array; the same as above but O(N) time complexity.
while (i < a.length && b < B.length):
{
    if(a[i] < b[j]) // check the sorted column
      i++;
    else 
      j++;
}

排序

Counting Sort 計數排序法是O(n)時間，O(n)空間的不穩定排序法，非in-place運作。要排序的原始資料必須在某個範圍內，並有最大最小值。
所需計數的空間: max-min+1
資料轉成計數索引的方法: arr[i]-最小值 可轉換成從零開始的索引
計數程式碼: for(int i=0;i<arr.length;i++) count[arr[i]-min]++;
排序程式碼: for(int i=min, j=0;i<=max;i++) while(count[i] > 0) { arr[j++] = count[i]--; }

下面用了穩定的Counting Sort.
如果HashMap是記錄的某種數字範圍，如文章中字出現次數範圍，可以下面方式將一般 O(nlog(n)) 排序降成 O(N)排序。
    for(String word: words) 
    { //記錄該字出現的順序                           
      if(!m.containsKey(word)) uniqueWords.add(word);
      ..
    }

    List<List<String>> res = new ArrayList<>();
    //最差狀況是每個字都有每一樣的計數
    for(String s: uniqueWords) res.add(new ArrayList<String>());
    或 for(int i=min;i<=max;i++) ....

    // 以出現次數來計數排序, min 最小值 為零時，可以不用。       
    for(String s: uniqueWords) res.get(m.get(s)-min).add(s);          

    for(int i=res.size()-1;i >=0;i--) //從高頻開始
    {
          List<String> l = res.get(i);
          for(int j=0;j<l.size() && l.size() > 0;j++)
          {          
            strRes[k][0] = l.get(j);
            strRes[k][1] = String.valueOf(i + min); 或 m.get(l.get(j)) //該字出現次數
            k++;
          }      
    }




                pre
Counting Sort | small integer range from 0 to k-1 |
   Radix Sort |
  Bucket Sort |


HashSet 的用法:
(1) 可用HashSet存無duplicate的集合.     
     nums = [1,2,3,4,5,5,5,6,7,7]
     for(int i: values) { hashset.add(i); }

(2) 可用HashSet.contains 查某元數是否重覆出現.
     nums = [1,2,3,4,5,5,5,6,7,7]
     for(int i: values) { if(hashset.contains(i)) { duplicate.add(i); }hashset.add(i); }

(3) 可用爬行法先入後除去，來確保當前Set裡最多k個元素.
    size()大於k個，就可以除去。
例子: 219. Contains Duplicate II 
        public boolean containsNearbyDuplicate(int[] nums, int k) {
        Set<Integer> set = new HashSet<>(); // O(n*log(n))TreeSet

        for (int i = 0; i < nums.length; ++i) {
            if (set.contains(nums[i])) return true;
            set.add(nums[i]);
            if (set.size() > k) {
                set.remove(nums[i - k]);
            }
        }
        
        return false;        
    }

(4) 快慢指標爬行法. i 慢 j 快. 
    當HashSet含有nums[j]的元素值，則去除在HashSet為nums[i]的元素值.
    當HashSet含有nums[j]的元素值，可計算j-i為區間長度，也是區間元素個數.
例子: 3. Longest Substring Without Repeating Characters
    public int lengthOfLongestSubstring(String s) {
        HashSet<Character> set = new HashSet<>();
        int i =0, j =0;
        int n = s.length(); int max = 0;
        while(i < n && j < n)
        {
            if(!set.contains(s.charAt(j)))
            {
                set.add(s.charAt(j++));
                max = Math.max(max, j-i);
            }
            else
            {
                set.remove(s.charAt(i++));
            }
        }
        
        return max;
    }

