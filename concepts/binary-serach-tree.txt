@ Definition of the Binary Search Tree
A binary search tree (BST), a special form of a binary tree, satisfies the binary search property:

The value in each node must be greater than (or equal to) any values stored in its left subtree.
The value in each node must be less than (or equal to) any values stored in its right subtree.
 
Here is an example of a BST.
      5
    /   \
   2     6   
 /  \      \
1    4      7
    /
   3  

We have exercises for you to validate a BST after this article. You can use the property we mentioned above to determine whether a binary tree is a BST or not. The recursive thinking we have introduced in the previous chapter might help you with this problem.
Like a normal binary tree, we can traverse a BST in preorder, inorder, postorder or level-order. However, it is noteworthy that inorder traversal in BST will be in ascending order. Therefore, the inorder traversal is the most frequent used traversal method of a BST.
We also have exercises for you to find the inorder successor in a BST after this article. Obviously, you can do the inorder traversal to find the inorder successor in a BST. But please try to apply the property of the BST we have learned to find out a better way to solve this problem.

@ Search in a BST - Introduction
BSTs support three main operations: search, insertion and deletion. In this section, we are going to talk about how to search for a specific value in a BST.

According to the property of BST, for each node:

return the node if the target value is equal to the value of the node;
continue searching in the left subtree if the target value is less than the value of the node;
continue searching in the right subtree if the target value is larger than the value of the node.
Let's go through an example: we search for target = 4 in the BST above.

@ Search in a BST - Introduction
BSTs support three main operations: search, insertion and deletion. In this section, we are going to talk about how to search for a specific value in a BST.

According to the property of BST, for each node:

return the node if the target value is equal to the value of the node;
continue searching in the left subtree if the target value is less than the value of the node;
continue searching in the right subtree if the target value is larger than the value of the node.
Let's go through an example: we search for target = 4 in the BST above.

Please implement the search operation by yourself in our following exercise. You can do it recursively or iteratively. Try to analyze the time complexity and space complexity as well. 
We will provide a solution after that.

@ Insertion in a BST - Solution
Insertion in a BST is quite similar with search in a BST. Here we only provide recursive solution in Java and C++ for your reference.
The time complexity of the insertion operation is the same with search operation which is O(h). Or O(N) in the worst case and O(logN) ideally if the tree is well organized.

The space complexity of the recursion soultion is O(h) as well. In other word, O(N) in the worst case and O(logN) ideally. If you implement the algorithm iteratively, the space complexity can be O(1).

@ Deletion in a BST - Introduction
Deletion is more complicated than the two operations we mentioned before. There are also many different strategies for deletion. We are going to introduce one of them which minimizes the changes. Our solution is to replace the target node with a proper child. According to the number of its children, we should consider three different cases:

1. If the target node has no child, we can simply remove the node.
2. If the target node has one child, we can use its child to replace itself.
3. If the target node has two children, replace the node with its in-order successor or predecessor node and delete that node.
 
Here are examples of different cases to help you understand this strategy.
By understanding the strategy above, you should be able to implement deletion function on your own. We have done an exercise about finding the inorder successor in a BST in the previous section. The solution for that question might help you implement the deletion function.

@Introduction to Binary Search Tree - Conclusion
We have introduced the properties of a BST and how to perform the basic operations, including search, insertion and deletion, in a BST. Being familiar with these basic ideas, you will be able to apply a BST to solve a real problem.

The strength of a BST is that you can perform all search, insertion and deletion operations in O(h) time complexity even in the worst case.
Usually, if you want to store data in order and need several operations, such as search, insertion or deletion, at the same time, a BST might be a good choice.

An Example
Problem: Design a class to find the kth largest element in a stream.

A most obvious way to solve this problem is to sort the array in descending order first and then return the kth element in the array.

But we have to sort for the new element everytime when we insert a new value in order to perform the search operation in O(1) time complexity. But the time complexity of the insertion operation will be O(N) in average. Therefore, time complexity will be O(N^2) in total.

Since we need insertion and search operations at the same time, what about using a BST to store the values?

As we know, for each node in a BST, all the values in the right subtree are larger than the value of the node itself while all the values in the left subtree are smaller than the value of the node.

In other word, for each node in a BST, if m nodes in the right subtree, the node itself is the m + 1 largest element in the existed array.

Think about the problem by yourself first. Feel free to store more than one value in a tree node. You might also want a counter in each node to indicate how many nodes there are in the subtree rooted at this node.

If you still don't have a clear clue about the solution, we provide the animation of an example for you: